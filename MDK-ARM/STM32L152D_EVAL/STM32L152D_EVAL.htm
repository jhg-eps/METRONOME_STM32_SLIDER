<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32L152D_EVAL\STM32L152D_EVAL.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32L152D_EVAL\STM32L152D_EVAL.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Thu Sep 29 02:20:55 2016
<BR><P>
<H3>Maximum Stack Usage =        144 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32l1xx_it.o(i.BusFault_Handler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[41]">COMP_ACQ_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[20]">COMP_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[1f]">DAC_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[3c]">DMA2_Channel1_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[3d]">DMA2_Channel2_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel3_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel4_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[40]">DMA2_Channel5_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32l1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l1xx_it.o(i.HardFault_Handler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[22]">LCD_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32l1xx_it.o(i.MemManage_Handler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[4e]">MyLinRots_ErrorStateProcess</a> from tsl_user.o(i.MyLinRots_ErrorStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[50]">MyLinRots_OffStateProcess</a> from tsl_user.o(i.MyLinRots_OffStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[1]">NMI_Handler</a> from stm32l1xx_it.o(i.NMI_Handler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32l1xx_it.o(i.PendSV_Handler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[37]">SDIO_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[39]">SPI3_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32l1xx_it.o(i.SVC_Handler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32l1xx_it.o(i.SysTick_Handler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[43]">SystemInit</a> from system_stm32l1xx.o(i.SystemInit) referenced from startup_stm32l152xd.o(.text)
 <LI><a href="#[c]">TAMPER_STAMP_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[24]">TIM10_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[25]">TIM11_IRQHandler</a> from stm32l1xx_it.o(i.TIM11_IRQHandler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[38]">TIM5_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[35]">TIM6_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[36]">TIM7_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[23]">TIM9_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[53]">TSL_linrot_CalcPos</a> from tsl_linrot.o(i.TSL_linrot_CalcPos) referenced from tsl_user.o(.constdata)
 <LI><a href="#[46]">TSL_linrot_CalibrationStateProcess</a> from tsl_linrot.o(i.TSL_linrot_CalibrationStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[47]">TSL_linrot_DebCalibrationStateProcess</a> from tsl_linrot.o(i.TSL_linrot_DebCalibrationStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[4c]">TSL_linrot_DebDetectStateProcess</a> from tsl_linrot.o(i.TSL_linrot_DebDetectStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[4f]">TSL_linrot_DebErrorStateProcess</a> from tsl_linrot.o(i.TSL_linrot_DebErrorStateProcess) referenced 5 times from tsl_user.o(.constdata)
 <LI><a href="#[49]">TSL_linrot_DebReleaseDetectStateProcess</a> from tsl_linrot.o(i.TSL_linrot_DebReleaseDetectStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[4a]">TSL_linrot_DebReleaseTouchStateProcess</a> from tsl_linrot.o(i.TSL_linrot_DebReleaseTouchStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[4b]">TSL_linrot_DetectStateProcess</a> from tsl_linrot.o(i.TSL_linrot_DetectStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[51]">TSL_linrot_Init</a> from tsl_linrot.o(i.TSL_linrot_Init) referenced from tsl_user.o(.constdata)
 <LI><a href="#[52]">TSL_linrot_Process</a> from tsl_linrot.o(i.TSL_linrot_Process) referenced from tsl_user.o(.constdata)
 <LI><a href="#[48]">TSL_linrot_ReleaseStateProcess</a> from tsl_linrot.o(i.TSL_linrot_ReleaseStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[45]">TSL_linrot_SetStateCalibration</a> from tsl_linrot.o(i.TSL_linrot_SetStateCalibration) referenced from tsl_ecs.o(i.TSL_ecs_ProcessK)
 <LI><a href="#[4d]">TSL_linrot_TouchStateProcess</a> from tsl_linrot.o(i.TSL_linrot_TouchStateProcess) referenced from tsl_user.o(.constdata)
 <LI><a href="#[3a]">UART4_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[3b]">UART5_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[34]">USB_FS_WKUP_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[1d]">USB_HP_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[1e]">USB_LP_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32l1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32l152xd.o(.text) referenced from startup_stm32l152xd.o(RESET)
 <LI><a href="#[44]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l152xd.o(.text)
 <LI><a href="#[42]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[44]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[54]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[59]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[9c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[9d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[9e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[9f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>COMP_ACQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USB_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[55]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>BSP_LED_Init</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, stm32l152d_eval.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>BSP_LED_Off</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l152d_eval.o(i.BSP_LED_Off))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Sensors
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>

<P><STRONG><a name="[5f]"></a>BSP_LED_On</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l152d_eval.o(i.BSP_LED_On))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Sensors
</UL>

<P><STRONG><a name="[60]"></a>BSP_LED_Toggle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l152d_eval.o(i.BSP_LED_Toggle))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>HAL_Delay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32l1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>

<P><STRONG><a name="[5c]"></a>HAL_GPIO_Init</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[61]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>

<P><STRONG><a name="[5d]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[64]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[73]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[65]"></a>HAL_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_Init &rArr; HAL_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[68]"></a>HAL_MspInit</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, stm32l1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[6a]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[66]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[72]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[6c]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 450 bytes, Stack size 32 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[6d]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[6e]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1860 bytes, Stack size 40 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[69]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>MyLinRots_ErrorStateProcess</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsl_user.o(i.MyLinRots_ErrorStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MyLinRots_ErrorStateProcess &rArr; TSL_linrot_SetStateOff &rArr; TSL_linrot_ProcessCh_All_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_SetStateOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>MyLinRots_OffStateProcess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tsl_user.o(i.MyLinRots_OffStateProcess))
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>Process_Sensors</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, main.o(i.Process_Sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Process_Sensors
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>SoftDelay</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tsl_acq_stm32l1xx_sw.o(i.SoftDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SoftDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankStartAcq
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32l1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tim_ProcessIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>SystemClock_Config</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>SystemInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, system_stm32l1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(.text)
</UL>
<P><STRONG><a name="[25]"></a>TIM11_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.TIM11_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_ProcessIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>TSL_BankConf</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, tsl_acq_stm32l1xx_sw.o(i.TSL_BankConf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_BankConf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankConfig
</UL>

<P><STRONG><a name="[77]"></a>TSL_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tsl.o(i.TSL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TSL_Init &rArr; TSL_acq_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Init
</UL>

<P><STRONG><a name="[79]"></a>TSL_acq_BankConfig</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, tsl_acq_stm32l1xx_sw.o(i.TSL_acq_BankConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TSL_acq_BankConfig &rArr; TSL_BankConf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_BankConf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Exec
</UL>

<P><STRONG><a name="[7b]"></a>TSL_acq_BankGetResult</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, tsl_acq.o(i.TSL_acq_BankGetResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TSL_acq_BankGetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_UseFilter
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_GetMeas
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_ComputeDelta
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_CheckNoise
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Exec
</UL>

<P><STRONG><a name="[80]"></a>TSL_acq_BankStartAcq</STRONG> (Thumb, 1142 bytes, Stack size 56 bytes, tsl_acq_stm32l1xx_sw.o(i.TSL_acq_BankStartAcq))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TSL_acq_BankStartAcq &rArr; TSL_acq_GroupDone
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_GroupDone
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Exec
</UL>

<P><STRONG><a name="[98]"></a>TSL_acq_BankWaitEOC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsl_acq_stm32l1xx_sw.o(i.TSL_acq_BankWaitEOC))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Exec
</UL>

<P><STRONG><a name="[7f]"></a>TSL_acq_CheckNoise</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsl_acq_stm32l1xx_sw.o(i.TSL_acq_CheckNoise))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankGetResult
</UL>

<P><STRONG><a name="[7e]"></a>TSL_acq_ComputeDelta</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tsl_acq_stm32l1xx_sw.o(i.TSL_acq_ComputeDelta))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankGetResult
</UL>

<P><STRONG><a name="[88]"></a>TSL_acq_ComputeMeas</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tsl_acq_stm32l1xx_sw.o(i.TSL_acq_ComputeMeas))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_ProcessK
</UL>

<P><STRONG><a name="[7c]"></a>TSL_acq_GetMeas</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tsl_acq_stm32l1xx_sw.o(i.TSL_acq_GetMeas))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankGetResult
</UL>

<P><STRONG><a name="[82]"></a>TSL_acq_GroupDone</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, tsl_acq_stm32l1xx_sw.o(i.TSL_acq_GroupDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_acq_GroupDone
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankStartAcq
</UL>

<P><STRONG><a name="[78]"></a>TSL_acq_Init</STRONG> (Thumb, 808 bytes, Stack size 44 bytes, tsl_acq_stm32l1xx_sw.o(i.TSL_acq_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TSL_acq_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_Init
</UL>

<P><STRONG><a name="[76]"></a>TSL_acq_ProcessIT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tsl_acq_stm32l1xx_sw.o(i.TSL_acq_ProcessIT))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM11_IRQHandler
</UL>

<P><STRONG><a name="[8c]"></a>TSL_acq_TestFirstReferenceIsValid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsl_acq_stm32l1xx_sw.o(i.TSL_acq_TestFirstReferenceIsValid))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_CalibrationStateProcess
</UL>

<P><STRONG><a name="[89]"></a>TSL_acq_TestReferenceOutOfRange</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsl_acq_stm32l1xx_sw.o(i.TSL_acq_TestReferenceOutOfRange))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_ProcessK
</UL>

<P><STRONG><a name="[7d]"></a>TSL_acq_UseFilter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsl_acq_stm32l1xx_sw.o(i.TSL_acq_UseFilter))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankGetResult
</UL>

<P><STRONG><a name="[99]"></a>TSL_dxs_FirstObj</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tsl_dxs.o(i.TSL_dxs_FirstObj))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Exec
</UL>

<P><STRONG><a name="[83]"></a>TSL_ecs_CalcK</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, tsl_ecs.o(i.TSL_ecs_CalcK))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TSL_ecs_CalcK
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_SetGlobalObj
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_Process
</UL>

<P><STRONG><a name="[85]"></a>TSL_ecs_Process</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tsl_ecs.o(i.TSL_ecs_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TSL_ecs_Process &rArr; TSL_ecs_ProcessK
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tim_CheckDelay_ms
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_ProcessK
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_CalcK
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Exec
</UL>

<P><STRONG><a name="[87]"></a>TSL_ecs_ProcessK</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, tsl_ecs.o(i.TSL_ecs_ProcessK))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TSL_ecs_ProcessK
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_TestReferenceOutOfRange
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_ComputeMeas
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_SetGlobalObj
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_Process
</UL>

<P><STRONG><a name="[53]"></a>TSL_linrot_CalcPos</STRONG> (Thumb, 596 bytes, Stack size 20 bytes, tsl_linrot.o(i.TSL_linrot_CalcPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSL_linrot_CalcPos
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_NormDelta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>TSL_linrot_CalibrationStateProcess</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, tsl_linrot.o(i.TSL_linrot_CalibrationStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TSL_linrot_CalibrationStateProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_TestFirstReferenceIsValid
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>TSL_linrot_DebCalibrationStateProcess</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, tsl_linrot.o(i.TSL_linrot_DebCalibrationStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TSL_linrot_DebCalibrationStateProcess &rArr; TSL_linrot_SetStateCalibration &rArr; TSL_linrot_ProcessCh_All_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaBelowEquMinus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_SetStateCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>TSL_linrot_DebDetectStateProcess</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, tsl_linrot.o(i.TSL_linrot_DebDetectStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TSL_linrot_DebDetectStateProcess &rArr; TSL_linrot_ProcessCh_One_DeltaAboveEqu
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaAboveEqu
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>TSL_linrot_DebErrorStateProcess</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tsl_linrot.o(i.TSL_linrot_DebErrorStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TSL_linrot_DebErrorStateProcess &rArr; TSL_linrot_SetStateCalibration &rArr; TSL_linrot_ProcessCh_All_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_GetStateMask
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_SetStateCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>TSL_linrot_DebReleaseDetectStateProcess</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, tsl_linrot.o(i.TSL_linrot_DebReleaseDetectStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TSL_linrot_DebReleaseDetectStateProcess &rArr; TSL_linrot_ProcessCh_One_DeltaAbove
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaAbove
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>TSL_linrot_DebReleaseTouchStateProcess</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, tsl_linrot.o(i.TSL_linrot_DebReleaseTouchStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TSL_linrot_DebReleaseTouchStateProcess &rArr; TSL_linrot_ProcessCh_One_DeltaAbove
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaAbove
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>TSL_linrot_DetectStateProcess</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tsl_linrot.o(i.TSL_linrot_DetectStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSL_linrot_DetectStateProcess &rArr; TSL_linrot_ProcessCh_One_DeltaAbove
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaAbove
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>TSL_linrot_GetStateMask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tsl_linrot.o(i.TSL_linrot_GetStateMask))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebErrorStateProcess
</UL>

<P><STRONG><a name="[51]"></a>TSL_linrot_Init</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tsl_linrot.o(i.TSL_linrot_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSL_linrot_Init &rArr; TSL_linrot_SetStateCalibration &rArr; TSL_linrot_ProcessCh_All_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_SetStateCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>TSL_linrot_NormDelta</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tsl_linrot.o(i.TSL_linrot_NormDelta))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_CalcPos
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaBelowEquMinus
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaAboveEqu
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaAbove
</UL>

<P><STRONG><a name="[52]"></a>TSL_linrot_Process</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tsl_linrot.o(i.TSL_linrot_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TSL_linrot_Process &rArr; TSL_linrot_ProcessCh_One_DataReady
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DataReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>TSL_linrot_ProcessCh_All_ClearRef</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tsl_linrot.o(i.TSL_linrot_ProcessCh_All_ClearRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSL_linrot_ProcessCh_All_ClearRef
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_SetStateCalibration
</UL>

<P><STRONG><a name="[92]"></a>TSL_linrot_ProcessCh_All_SetStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tsl_linrot.o(i.TSL_linrot_ProcessCh_All_SetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSL_linrot_ProcessCh_All_SetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_SetStateOff
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_SetStateCalibration
</UL>

<P><STRONG><a name="[8b]"></a>TSL_linrot_ProcessCh_One_AcqStatusError</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tsl_linrot.o(i.TSL_linrot_ProcessCh_One_AcqStatusError))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_TouchStateProcess
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ReleaseStateProcess
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DetectStateProcess
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebReleaseTouchStateProcess
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebReleaseDetectStateProcess
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebErrorStateProcess
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebDetectStateProcess
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebCalibrationStateProcess
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_CalibrationStateProcess
</UL>

<P><STRONG><a name="[91]"></a>TSL_linrot_ProcessCh_One_DataReady</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, tsl_linrot.o(i.TSL_linrot_ProcessCh_One_DataReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_linrot_ProcessCh_One_DataReady
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_Process
</UL>

<P><STRONG><a name="[90]"></a>TSL_linrot_ProcessCh_One_DeltaAbove</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tsl_linrot.o(i.TSL_linrot_ProcessCh_One_DeltaAbove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSL_linrot_ProcessCh_One_DeltaAbove
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_NormDelta
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_TouchStateProcess
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DetectStateProcess
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebReleaseTouchStateProcess
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebReleaseDetectStateProcess
</UL>

<P><STRONG><a name="[8e]"></a>TSL_linrot_ProcessCh_One_DeltaAboveEqu</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tsl_linrot.o(i.TSL_linrot_ProcessCh_One_DeltaAboveEqu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSL_linrot_ProcessCh_One_DeltaAboveEqu
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_NormDelta
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ReleaseStateProcess
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebDetectStateProcess
</UL>

<P><STRONG><a name="[8d]"></a>TSL_linrot_ProcessCh_One_DeltaBelowEquMinus</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tsl_linrot.o(i.TSL_linrot_ProcessCh_One_DeltaBelowEquMinus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSL_linrot_ProcessCh_One_DeltaBelowEquMinus
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_NormDelta
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ReleaseStateProcess
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebCalibrationStateProcess
</UL>

<P><STRONG><a name="[48]"></a>TSL_linrot_ReleaseStateProcess</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, tsl_linrot.o(i.TSL_linrot_ReleaseStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TSL_linrot_ReleaseStateProcess &rArr; TSL_linrot_SetStateCalibration &rArr; TSL_linrot_ProcessCh_All_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaBelowEquMinus
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaAboveEqu
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_SetStateCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>TSL_linrot_SetStateCalibration</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, tsl_linrot.o(i.TSL_linrot_SetStateCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSL_linrot_SetStateCalibration &rArr; TSL_linrot_ProcessCh_All_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_All_SetStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_All_ClearRef
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ReleaseStateProcess
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebErrorStateProcess
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_DebCalibrationStateProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_ecs.o(i.TSL_ecs_ProcessK)
</UL>
<P><STRONG><a name="[70]"></a>TSL_linrot_SetStateOff</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tsl_linrot.o(i.TSL_linrot_SetStateOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSL_linrot_SetStateOff &rArr; TSL_linrot_ProcessCh_All_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_All_SetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyLinRots_ErrorStateProcess
</UL>

<P><STRONG><a name="[4d]"></a>TSL_linrot_TouchStateProcess</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tsl_linrot.o(i.TSL_linrot_TouchStateProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSL_linrot_TouchStateProcess &rArr; TSL_linrot_ProcessCh_One_DeltaAbove
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_DeltaAbove
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_linrot_ProcessCh_One_AcqStatusError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>TSL_obj_GroupInit</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, tsl_object.o(i.TSL_obj_GroupInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TSL_obj_GroupInit
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_SetGlobalObj
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Init
</UL>

<P><STRONG><a name="[95]"></a>TSL_obj_GroupProcess</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, tsl_object.o(i.TSL_obj_GroupProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TSL_obj_GroupProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_SetGlobalObj
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Exec
</UL>

<P><STRONG><a name="[84]"></a>TSL_obj_SetGlobalObj</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tsl_object.o(i.TSL_obj_SetGlobalObj))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_GroupProcess
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_GroupInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_ProcessK
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_CalcK
</UL>

<P><STRONG><a name="[86]"></a>TSL_tim_CheckDelay_ms</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, tsl_time.o(i.TSL_tim_CheckDelay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_tim_CheckDelay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_Process
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Exec
</UL>

<P><STRONG><a name="[74]"></a>TSL_tim_ProcessIT</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tsl_time.o(i.TSL_tim_ProcessIT))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xd.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[a5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[a6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[42]"></a>main</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsl_user_Exec
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Sensors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[97]"></a>tsl_user_Exec</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tsl_user.o(i.tsl_user_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = tsl_user_Exec &rArr; TSL_acq_BankStartAcq &rArr; TSL_acq_GroupDone
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tim_CheckDelay_ms
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_GroupProcess
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_Process
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_dxs_FirstObj
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankWaitEOC
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankStartAcq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankGetResult
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>tsl_user_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tsl_user.o(i.tsl_user_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = tsl_user_Init &rArr; TSL_Init &rArr; TSL_acq_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_GroupInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6f]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, stm32l1xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[6b]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[62]"></a>Error_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Error_Handler &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
